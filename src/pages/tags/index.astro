---
import type { CollectionEntry } from 'astro:content';
import { getCollection } from 'astro:content';
import BaseLayout from '@src/layouts/BaseLayout.astro';
import { slugify } from '@src/utils';

type BlogPost = CollectionEntry<'blog'>;
interface Tag {
	value: string;
	label: string;
	postCount: number;
}

function groupTagsByFirstLetter(tags: Tag[]) {
  const grouped = tags.reduce((acc, tag) => {
    const firstLetter = tag.label[0].toUpperCase();
    if (!acc[firstLetter]) {
      acc[firstLetter] = [];
    }
    acc[firstLetter].push(tag);
    return acc;
  }, {} as Record<string, Tag[]>);

  return Object.entries(grouped)
    .sort(([a], [b]) => a.localeCompare(b))
    .map(([letter, tags]) => ({
      letter,
      tags: tags.sort((a, b) => a.label.localeCompare(b.label)),
    }));
}

const allPosts: BlogPost[] = await getCollection('blog');
const mappedTags: { [key: string]: Tag } = {};
for (const post of allPosts) {
	for (const tag of post.data?.tags || []) {
		const tagValue = slugify(tag);
		if (mappedTags[tagValue]) {
			mappedTags[tagValue].postCount += 1;
		} else {
			const _tag: Tag = {
				value: tagValue,
				label: tag,
				postCount: 1
			};
			mappedTags[tagValue] = _tag;
		}
	}
}
const groupedTags  = groupTagsByFirstLetter(Object.values(mappedTags))
const title = `~# Etiquetas / Tags`;
const description = 'Etiquetas Claves: palabras clave breves para clasificar y facilitar la búsqueda de proyectos.'
---

<BaseLayout title={title} description={description}>
	<div class='container'>
    <canvas id="cyber-particles" class="absolute inset-0 w-full z-0"></canvas>
    <div class="mb-10">
      <h1 class="text-3xl font-bold mb-2 text-4xl font-extrabold mb-2 bg-gradient-to-r from-green-400 to-emerald-500 bg-clip-text text-transparent">{title}</h1>
      <p class="text-zinc-700 dark:text-zinc-300 text-lg">{description}</p>
    </div>
    <div>
      {groupedTags.map(({ letter, tags }) => (
        <div class="flex gap-2 border-b dark:border-b-zinc-700 py-3 mb-5 capitalize">
          <h2 class="text-2xl font-bold text-zinc-800 dark:text-zinc-200 w-7 shrink-0">{letter}</h2>
          <div class='flex gap-2 flex-wrap'>
            {
              (tags || [] )?.map((tag: Tag) => (
                <a
                  class='border border-zinc-300 dark:border-zinc-700 rounded-2xl
                    text-sm text-zinc-700 dark:text-zinc-300 no-underline px-3 py-1
                    transition-all duration-700
                  hover:border-zinc-700 dark:hover:border-zinc-300'
                  href={`/tags/${slugify(tag.value)}/`}>
                  {tag.label} ({tag.postCount})
                </a>
              ))
            }
          </div>
        </div>
      ))}
    </div>
	</div>
</BaseLayout>

<style>
  /* ======= Estilos generales ======= */
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }
  .animate-fadeIn {
    animation: fadeIn 1s ease forwards;
  }
  h1::after {
    content: "_";
    color: #22c55e;
    animation: blink 1.2s infinite;
  }
  h2::after {
    content: "_";
    color: #ffffff;
    animation: blink 1.2s infinite;
  }

  @keyframes blink {
    50% { opacity: 0; }
  }

  /* ======= Canvas de partículas ======= */
  #cyber-particles {
    pointer-events: none;
    opacity: 0.3;
  }
</style>

<script>
  import { initCyberParticles } from '../../scripts/cyber-particles';
  initCyberParticles();
</script>

