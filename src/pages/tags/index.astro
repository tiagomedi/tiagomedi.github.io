---
import type { CollectionEntry } from 'astro:content';
import { getCollection } from 'astro:content';
import BaseLayout from '@src/layouts/BaseLayout.astro';
import { slugify } from '@src/utils';

type BlogPost = CollectionEntry<'blog'>;
interface Tag {
	value: string;
	label: string;
	postCount: number;
}

function groupTagsByFirstLetter(tags: Tag[]) {
  const grouped = tags.reduce((acc, tag) => {
    const firstLetter = tag.label[0].toUpperCase();
    if (!acc[firstLetter]) {
      acc[firstLetter] = [];
    }
    acc[firstLetter].push(tag);
    return acc;
  }, {} as Record<string, Tag[]>);

  return Object.entries(grouped)
    .sort(([a], [b]) => a.localeCompare(b))
    .map(([letter, tags]) => ({
      letter,
      tags: tags.sort((a, b) => a.label.localeCompare(b.label)),
    }));
}

const allPosts: BlogPost[] = await getCollection('blog');
const mappedTags: { [key: string]: Tag } = {};
for (const post of allPosts) {
	for (const tag of post.data?.tags || []) {
		const tagValue = slugify(tag);
		if (mappedTags[tagValue]) {
			mappedTags[tagValue].postCount += 1;
		} else {
			const _tag: Tag = {
				value: tagValue,
				label:  tag,
				postCount: 1
			};
			mappedTags[tagValue] = _tag;
		}
	}
}
const groupedTags  = groupTagsByFirstLetter(Object.values(mappedTags))
const title = `root@bitacora_cyber:~# ls -la /tags/ | Tags Index`;
const description = `[+] Database index loaded | ${Object.keys(mappedTags).length} unique tags detected | Classification system active`
---

<BaseLayout title={title} description={description}>
	<div class='container'>
    <canvas id="cyber-particles" class="absolute inset-0 w-full z-0"></canvas>
    <div class="mb-10">
      <h1 class="text-3xl font-bold mb-2 text-4xl font-extrabold mb-2 bg-gradient-to-r from-amber-400 to-violet-500 bg-clip-text text-transparent">{title}</h1>
      <p class="text-zinc-700 dark:text-zinc-300 text-lg">{description}</p>
    </div>
    <div>
      {groupedTags.map(({ letter, tags }) => (
        <div class="flex gap-2 border-b border-purple-400/30 py-4 mb-5 capitalize">
          <h2 class="text-2xl font-bold text-amber-400 w-7 shrink-0 no-cursor">{letter}</h2>
          <div class='flex gap-2 flex-wrap'>
            {
              (tags || [] )?.map((tag: Tag) => (
                <a
                  class='tag-badge'
                  href={`/tags/${slugify(tag.value)}/`}>
                  {tag.label} <span class="tag-count">({tag.postCount})</span>
                </a>
              ))
            }
          </div>
        </div>
      ))}
    </div>
	</div>
</BaseLayout>

<style>
  /* ======= Estilos generales ======= */
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }
  .animate-fadeIn {
    animation: fadeIn 1s ease forwards;
  }
  h1::after {
    content: "_";
    color: #a855f7;
    animation: blink 1.2s infinite;
  }

  @keyframes blink {
    50% { opacity: 0; }
  }

  /* ======= Canvas de partículas ======= */
  #cyber-particles {
    pointer-events: none;
    opacity: 0.3;
  }

  /* ======= Letras sin animación ======= */
  .no-cursor::after {
    content: none !important;
  }

  /* ======= Tags animados ======= */
  .tag-badge {
    position: relative;
    display: inline-block;
    border: 2px solid rgba(168, 85, 247, 0.4);
    border-radius: 0.75rem;
    font-size: 0.875rem;
    color: #d8b4fe;
    text-decoration: none;
    padding: 0.5rem 1rem;
    transition: all 0.3s ease;
    background: linear-gradient(135deg, rgba(17, 24, 39, 0.6), rgba(31, 41, 55, 0.4));
    overflow: hidden;
    opacity: 0;
    transform: translateY(10px) scale(0.95);
    animation: unlockTag 0.5s ease forwards;
  }

  @keyframes unlockTag {
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  .tag-badge:nth-child(1) { animation-delay: 0.05s; }
  .tag-badge:nth-child(2) { animation-delay: 0.1s; }
  .tag-badge:nth-child(3) { animation-delay: 0.15s; }
  .tag-badge:nth-child(4) { animation-delay: 0.2s; }
  .tag-badge:nth-child(5) { animation-delay: 0.25s; }
  .tag-badge:nth-child(6) { animation-delay: 0.3s; }
  .tag-badge:nth-child(7) { animation-delay: 0.35s; }
  .tag-badge:nth-child(8) { animation-delay: 0.4s; }
  .tag-badge:nth-child(9) { animation-delay: 0.45s; }
  .tag-badge:nth-child(n+10) { animation-delay: 0.5s; }

  .tag-badge:hover {
    transform: translateY(-4px) scale(1.05);
    border-color: rgba(251, 191, 36, 0.6);
    color: #fbbf24;
    background: linear-gradient(135deg, rgba(168, 85, 247, 0.2), rgba(251, 191, 36, 0.15));
    box-shadow: 
      0 0 20px rgba(168, 85, 247, 0.3),
      0 0 35px rgba(251, 191, 36, 0.15);
  }

  .tag-badge::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 100%;
    height: 100%;
    background: radial-gradient(circle, rgba(168, 85, 247, 0.2), transparent 70%);
    transform: translate(-50%, -50%) scale(0);
    transition: transform 0.4s ease;
    pointer-events: none;
  }

  .tag-badge:hover::before {
    transform: translate(-50%, -50%) scale(1.5);
  }

  .tag-count {
    color: #a78bfa;
    font-weight: 600;
    font-size: 0.8rem;
  }

  .tag-badge:hover .tag-count {
    color: #fbbf24;
  }

  /* Efecto de pulso sutil */
  @keyframes pulse-tag {
    0%, 100% {
      box-shadow: 0 0 10px rgba(168, 85, 247, 0.2);
    }
    50% {
      box-shadow: 0 0 15px rgba(168, 85, 247, 0.3);
    }
  }

  .tag-badge {
    animation: unlockTag 0.5s ease forwards, pulse-tag 4s ease-in-out infinite 1s;
  }
</style>

<script>
  import { initCyberParticles } from '../../scripts/cyber-particles';
  initCyberParticles();
</script>

