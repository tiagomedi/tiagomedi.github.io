---
const { headings, maxLevel = 3 } = Astro.props;
const toc = buildToc(headings);
function buildToc(headings: any) {
	const _toc: any = [];
	const parentHeadings = new Map();
	(headings || []).forEach((h: any) => {
		const heading = { ...h, subheadings: [] };
		parentHeadings.set(heading.depth, heading);
		// Change 2 to 1 if your markdown includes your <h1>
		if (heading.depth === 2) {
			_toc.push(heading);
		} else {
			if (maxLevel > 2) {
				parentHeadings.get(heading.depth - 1)?.subheadings?.push(heading);
			}
		}
	});
	return _toc;
}
---

<nav class='toc sticky top-4 py-3 lg:-ml-3 py-6 to-transparent rounded-lg p-4'>
	<h3 class='font-extrabold uppercase mb-4 text-xs font-mono bg-gradient-to-r from-purple-400 to-violet-500 bg-clip-text text-transparent'>
		<span class="text-yellow-400">[</span> Índice <span class="text-yellow-400">]</span>
	</h3>
	<ul class='toc-list max-h-[calc(100vh-70px)] overflow-auto text-xs'>
		{
			toc.map((heading: any) => (
				<li>
					<a
						class='toc-link block py-1.5 px-3 border-l-2 border-transparent text-gray-600 dark:text-gray-400 hover:border-purple-400 hover:text-purple-400 transition-all duration-200 leading-snug'
						href={'#' + heading.slug}
						data-target={heading.slug}>
						{heading.text}
					</a>
					{heading.subheadings?.length > 0 && (
						<ul>
							{heading.subheadings.map((subheading: any) => (
								<li>
									<a
										class='toc-link block py-1.5 pl-6 pr-3 border-l-2 border-transparent text-gray-500 dark:text-gray-500 hover:border-violet-400 hover:text-violet-400 transition-all duration-200 leading-snug text-[0.8rem]'
										href={'#' + subheading.slug}
										data-target={subheading.slug}>
										{subheading.text}
									</a>
								</li>
							))}
						</ul>
					)}
				</li>
			))
		}
	</ul>
</nav>

<script>
	function setupTOC() {
		const observer = new IntersectionObserver((entries) => {
			entries.forEach((entry) => {
				const id = entry.target.getAttribute('id');
				const tocLink = document.querySelector(`.toc-link[data-target="${id}"]`);
				
				if (entry.isIntersecting) {
					// Remover clase activa de todos los enlaces
					document.querySelectorAll('.toc-link').forEach((link) => {
						link.classList.remove('active');
					});
					// Agregar clase activa al enlace correspondiente
					if (tocLink) {
						tocLink.classList.add('active');
					}
				}
			});
		}, {
			rootMargin: '-80px 0px -80% 0px',
			threshold: 0
		});

		// Observar todos los headings
		document.querySelectorAll('h2[id], h3[id], h4[id]').forEach((heading) => {
			observer.observe(heading);
		});
	}

	// Ejecutar cuando el DOM esté listo
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', setupTOC);
	} else {
		setupTOC();
	}

	// Re-ejecutar después de navegaciones del lado del cliente (Astro View Transitions)
	document.addEventListener('astro:page-load', setupTOC);
</script>

<style>
	.toc-list::-webkit-scrollbar {
		width: 4px;
	}

	/* Track */
	.toc-list::-webkit-scrollbar-track {
		background: transparent;
	}

	/* Handle */
	.toc-list::-webkit-scrollbar-thumb {
		background: rgba(147, 51, 234, 0.3);
		border-radius: 4px;
	}
	
	.toc-list::-webkit-scrollbar-thumb:hover {
		background: rgba(147, 51, 234, 0.5);
	}

	/* Estilo para el elemento activo */
	.toc-link.active {
		@apply border-purple-400 text-purple-400 font-bold bg-purple-400/10;
	}
	
	.toc-link.active[href*="#"]:not([href*="h2"]) {
		@apply border-violet-400 text-violet-400 bg-violet-400/10;
	}
</style>
